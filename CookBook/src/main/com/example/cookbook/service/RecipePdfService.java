package com.example.cookbook.service;

import com.example.cookbook.domain.Recipe;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.colors.ColorConstants;
import com.itextpdf.kernel.pdf.*;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.*;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.kernel.pdf.canvas.draw.SolidLine;
import com.itextpdf.layout.element.LineSeparator;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.net.MalformedURLException;

@Service
public class RecipePdfService {

    public byte[] generateRecipePdf(Recipe recipe) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(byteArrayOutputStream);
        PdfDocument pdfDocument = new PdfDocument(writer);
        Document document = new Document(pdfDocument);

        document.add(new Paragraph(recipe.getName())
                .setBold()
                .setFontSize(20)
                .setTextAlignment(TextAlignment.CENTER));

        document.add(new Paragraph(" "));

        if (recipe.getImagePath() != null && !recipe.getImagePath().isEmpty()) {
            try {
                String imagePath = "src/main/resources/static/uploads/" + recipe.getImagePath();
                ImageData imageData = ImageDataFactory.create(imagePath);
                Image recipeImage = new Image(imageData).setWidth(400).setAutoScale(true);
                recipeImage.setHorizontalAlignment(HorizontalAlignment.CENTER);
                document.add(recipeImage);
            } catch (MalformedURLException e) {
                document.add(new Paragraph("⛔ Nie udało się załadować obrazu"));
            }
        }

        document.add(new Paragraph(" "));

        document.add(new Paragraph("📅 Data utworzenia: " + recipe.getCreationDate())
                .setFontSize(12)
                .setTextAlignment(TextAlignment.RIGHT));

        document.add(new Paragraph("🍽 Kategoria: " + (recipe.getCategory() != null ? recipe.getCategory().getName() : "Brak kategorii"))
                .setBold()
                .setFontSize(14));

        document.add(new Paragraph("\n🛒 Składniki:").setBold().setFontSize(14));
        Table ingredientsTable = new Table(2).useAllAvailableWidth();
        ingredientsTable.addHeaderCell(new Cell().add(new Paragraph("Składnik").setBold()).setBackgroundColor(ColorConstants.LIGHT_GRAY));
        ingredientsTable.addHeaderCell(new Cell().add(new Paragraph("Ilość").setBold()).setBackgroundColor(ColorConstants.LIGHT_GRAY));

        recipe.getIngredients().forEach(ingredient ->
                ingredientsTable.addCell(new Cell().add(new Paragraph(ingredient.getName())))
                        .addCell(new Cell().add(new Paragraph(ingredient.getQuantity() + " " + ingredient.getUnit())))
        );

        document.add(ingredientsTable);
        document.add(new Paragraph(" "));
        document.add(new Paragraph("📌 Instrukcje:").setBold().setFontSize(14));
        document.add(new Paragraph(recipe.getInstructions()).setMarginLeft(10));

        document.add(new Paragraph(" "));

        document.add(new Paragraph("⭐ Ocena: " + recipe.getRating() + "/5").setBold());
        document.add(new Paragraph("🥦 Wegetariański: " + (recipe.getVegetarian() ? "Tak" : "Nie")).setBold());

        document.add(new LineSeparator(new SolidLine()));

        document.add(new Paragraph("📖 Generated by CookBook App").setFontSize(10).setTextAlignment(TextAlignment.CENTER));

        document.close();
        return byteArrayOutputStream.toByteArray();
    }
}
